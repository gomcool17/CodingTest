#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>

using namespace std;

int solution(vector<int> queue1, vector<int> queue2) {
    int answer = -2;
    queue<int> q1,q2;
    long long sum = 0;
    long long qu1=0, qu2 = 0;
    long long qu1m = 0, qu2m = 0;
    long long r1=0,r2=0;

    for(int i=0;i<queue1.size();i++) {
        q1.push(queue1[i]);
        qu1 += queue1[i];
        sum+=queue1[i];
        qu1m = max(qu1m, (long long)queue1[i]);
        r1++;
    }
    for(int i=0;i<queue2.size();i++) {
        q2.push(queue2[i]);
        qu2 += queue2[i];
        sum+=queue2[i];
        qu2m = max(qu2m, (long long)queue2[i]);
        r2++;
    }
    
    long long cnt = 0;
    if(sum % 2 == 0) sum/=2;
    else return -1;

    //int a = 0;
    bool f = false;
    long long m =0, n;
    while(qu1 != qu2) {
        if(qu1 > sum) {
            if(m < qu1) {
                m = qu1, n = qu2;
            }
        }
        if(qu1 > qu2) {
            int n=q1.front();
            q1.pop();
            q2.push(n);
            qu1 -= n, qu2 += n;
        }
        else if(qu1 < qu2) {
            int n = q2.front();
            q2.pop();
            q1.push(n);
            qu1 += n,  qu2 -= n;
        }
        cnt++;
        if(q1.empty() || q2.empty()) return -1;
        if(qu2 == m && qu1 == n) return -1;
        
    }

    return (int)cnt;
}
int main()
{
    cout << solution({1,2,1,2},{1,10,1,2}) << "\n";
  //  cout << solution({2,2,3,7,1,100000000},{5,4,1,6,1,2,20002202}) << "\n";
  //  cout << solution({1,1,2},{1,5,4})<<"\n";
  //  cout << solution({1,3,5,7},{2,1,4,5})<<"\n";
  // cout << solution({100000000,1,1,1,1,1,1,1,1,1,3,3,3,3,1,1,1,1,1,1,13,3,3,33,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{2,2,2,2,2,2,2,2,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,22,2,2,2,2,2,2});
  //  cout << solution({},{1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1999999999,1,123456789,98765321,2,3,4,1});
    cout << solution({1,1,1,1,100000000,987654322},{2,2,4,3,987654321});
}